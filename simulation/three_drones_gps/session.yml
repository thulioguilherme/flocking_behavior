name: simulation
root: ./
startup_window: neighbors_topic
pre_window: export UAV_NAME=uav1; export RUN_TYPE=simulation; export UAV_TYPE=f450; export ODOMETRY_TYPE=gps; export WORLD_NAME=simulation
windows:
  - roscore:
      layout: tiled
      panes:
        - roscore
  - gazebo:
      layout: tiled
      panes:
        - waitForRos; roslaunch mrs_simulation simulation.launch world_name:=grass_plane gui:=true
  - status:
      layout: tiled
      synchronize: after
      panes:
        - export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_status status.launch
        - export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_status status.launch
        - export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_status status.launch
  - spawn:
      layout: tiled
      synchronize: after
      panes:
        - waitForSimulation; spawn_uav 1 --$UAV_TYPE --run --delete --enable-rangefinder --enable-ground-truth --file uav1_pos.yaml
        - waitForSimulation; spawn_uav 2 --$UAV_TYPE --run --delete --enable-rangefinder --enable-ground-truth --file uav2_pos.yaml
        - waitForSimulation; spawn_uav 3 --$UAV_TYPE --run --delete --enable-rangefinder --enable-ground-truth --file uav3_pos.yaml
  - control:
      layout: tiled
      synchronize: after
      panes:
        - export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general core.launch config_mpc_tracker:=./custom_configs/mpc_tracker.yaml
        - export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general core.launch config_mpc_tracker:=./custom_configs/mpc_tracker.yaml
        - export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_general core.launch config_mpc_tracker:=./custom_configs/mpc_tracker.yaml
  - automatic_start:
      layout: tiled
      synchronize: after
      panes:
        - export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch
        - export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch
        - export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch
  - state_machine:
      layout: tiled
      synchronize: after
      panes:
        - waitForOdometry; history -s 'rosservice call /uav1/automatic_start/start'
        - waitForOdometry; history -s 'rosservice call /uav2/automatic_start/start'
        - waitForOdometry; history -s 'rosservice call /uav3/automatic_start/start'
  - command_sender:
      layout: tiled
      panes:
        - waitForSimulation; roslaunch flocking command_sender.launch
  - hover_mode:
      layout: tiled
      panes:
        - 'history -s rosservice call /command_sender/send_command \"value: 0\"'
  - swarming_mode:
      layout: tiled
      panes:
        - 'history -s rosservice call /command_sender/send_command \"value: 1\"'
  - emergency_mode:
      layout: tiled
      panes:
        - 'history -s rosservice call /command_sender/send_command \"value: 2\"'
  - takeoff:
      layout: tiled
      synchronize: after
      panes:
        # #{ uav1
        - 'export UAV_NAME=uav1;
          waitForControl;
          rosservice call /$UAV_NAME/mavros/cmd/arming 1;
          rosservice call /$UAV_NAME/mavros/set_mode 0 offboard'
        # #}
        # #{ uav2
        - 'export UAV_NAME=uav2;
          waitForControl;
          rosservice call /$UAV_NAME/mavros/cmd/arming 1;
          rosservice call /$UAV_NAME/mavros/set_mode 0 offboard'
        # #}
        # #{ uav3
        - 'export UAV_NAME=uav3;
          waitForControl;
          rosservice call /$UAV_NAME/mavros/cmd/arming 1;
          rosservice call /$UAV_NAME/mavros/set_mode 0 offboard'
        # #}
  - sensor_neighbor:
      layout: tiled
      synchronize: after
      panes:
        - export UAV_NAME=uav1; waitForOdometry; roslaunch flocking sensor_neighbor.launch
        - export UAV_NAME=uav2; waitForOdometry; roslaunch flocking sensor_neighbor.launch
        - export UAV_NAME=uav3; waitForOdometry; roslaunch flocking sensor_neighbor.launch
  - formation:
      layout: tiled
      synchronize: after
      panes:
        - export UAV_NAME=uav1; waitForOdometry; roslaunch flocking formation.launch
        - export UAV_NAME=uav2; waitForOdometry; roslaunch flocking formation.launch
        - export UAV_NAME=uav3; waitForOdometry; roslaunch flocking formation.launch
  - neighbors_topic:
      layout: tiled
      synchronize: after
      panes:
        - waitForRos; rostopic echo /uav1/sensor_neighbor/neighbors
        - waitForRos; rostopic echo /uav2/sensor_neighbor/neighbors
        - waitForRos; rostopic echo /uav3/sensor_neighbor/neighbors