name: simulation
root: ./
startup_window: status
pre_window: export UAV_NAME=uav1; export RUN_TYPE=simulation; export UAV_TYPE=f450; export ODOMETRY_TYPE=gps; export WORLD_NAME=simulation_local; export SENSORS="garmin_down"
windows:
  - roscore:
      layout: tiled
      panes:
        - roscore
  - gazebo:
      layout: tiled
      panes:
        #- waitForRos; roslaunch mrs_simulation simulation.launch world_name:=grass_plane gui:=true
        - waitForRos; roslaunch mrs_simulation simulation.launch world_name:=plans gui:=true
        - waitForOdometry; gz camera -c gzclient_camera -f uav1; history -s gz camera -c gzclient_camera -f uav1
  - status:
      layout: tiled
      synchronize: after
      panes:
        - export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_status status.launch
        - export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_status status.launch
        - export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_status status.launch
  - spawn:
      layout: tiled
      panes:
        - waitForSimulation; rosservice call /mrs_drone_spawner/spawn "1 $UAV_TYPE --enable-rplidar --enable-rangefinder --enable-ground-truth --pos_file `pwd`/pos1.yaml --enable-uv-leds --uvled-fr-r 6 --uvled-fr-l 6 --enable-uv-camera --uvcam-calib-file `rospack find uvdar_core`/include/OCamCalib/config/calib_results_bf_uv_fe.txt"
        - waitForSimulation; sleep 10; rosservice call /mrs_drone_spawner/spawn "2 $UAV_TYPE --enable-rplidar --enable-rangefinder --enable-ground-truth --pos_file `pwd`/pos2.yaml --enable-uv-leds --uvled-fr-r 15 --uvled-fr-l 15 --enable-uv-camera --uvcam-calib-file `rospack find uvdar_core`/include/OCamCalib/config/calib_results_bf_uv_fe.txt"
        - waitForSimulation; sleep 20; rosservice call /mrs_drone_spawner/spawn "3 $UAV_TYPE --enable-rplidar --enable-rangefinder --enable-ground-truth --pos_file `pwd`/pos3.yaml --enable-uv-leds --uvled-fr-r 30 --uvled-fr-l 30 --enable-uv-camera --uvcam-calib-file `rospack find uvdar_core`/include/OCamCalib/config/calib_results_bf_uv_fe.txt"
  - bumper:
      layout: tiled
      synchronize: after
      panes:
        - export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_bumper bumper.launch
        - export UAV_NAME=uav2; waitForOdometry; roslaunch mrs_bumper bumper.launch
        - export UAV_NAME=uav3; waitForOdometry; roslaunch mrs_bumper bumper.launch
  - control:
      layout: tiled
      synchronize: after
      panes:
        - export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_uav_general core.launch config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_control_manager:=./custom_configs/control_manager.yaml
        - export UAV_NAME=uav2; waitForOdometry; roslaunch mrs_uav_general core.launch config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_control_manager:=./custom_configs/control_manager.yaml
        - export UAV_NAME=uav3; waitForOdometry; roslaunch mrs_uav_general core.launch config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_control_manager:=./custom_configs/control_manager.yaml
  - automatic_start:
      layout: tiled
      synchronize: after
      panes:
        - export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch
        - export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch
        - export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch
  - command_sender:
      layout: tiled
      panes:
        - waitForSimulation; roslaunch flocking command_sender.launch
  - hover_mode:
      layout: tiled
      panes:
        - 'history -s rosservice call /command_sender/send_command \"value: 0\"'
  - swarming_mode:
      layout: tiled
      panes:
        - 'history -s rosservice call /command_sender/send_command \"value: 1\"'
  - emergency_mode:
      layout: tiled
      panes:
        - 'history -s rosservice call /command_sender/send_command \"value: 2\"'
  - takeoff:
      layout: tiled
      synchronize: after
      panes:
        # #{ uav1
        - 'export UAV_NAME=uav1;
          waitForControl;
          rosservice call /$UAV_NAME/mavros/cmd/arming 1;
          rosservice call /$UAV_NAME/mavros/set_mode 0 offboard'
        # #}
        # #{ uav2
        - 'export UAV_NAME=uav2;
          waitForControl;
          rosservice call /$UAV_NAME/mavros/cmd/arming 1;
          rosservice call /$UAV_NAME/mavros/set_mode 0 offboard'
        # #}
        # #{ uav3
        - 'export UAV_NAME=uav3;
          waitForControl;
          rosservice call /$UAV_NAME/mavros/cmd/arming 1;
          rosservice call /$UAV_NAME/mavros/set_mode 0 offboard'
        # #}
  - uv_observer:
      layout: even-vertical
      panes:
        - waitForCompile; gz world --pause=0; sleep 6;  export UAV_NAME=uav1; waitForControl; roslaunch uvdar_core multi_frequency_test.launch
        - waitForCompile; gz world --pause=0; sleep 6;  export UAV_NAME=uav2; waitForControl; roslaunch uvdar_core multi_frequency_test.launch
        - waitForCompile; gz world --pause=0; sleep 6;  export UAV_NAME=uav3; waitForControl; roslaunch uvdar_core multi_frequency_test.launch
  - kalman_filter:
      layout: even-vertical
      panes:
        - export UAV_NAME=uav1; waitForControl; roslaunch uvdar_core uvdar_kalman_identified.launch output_frame:=$UAV_NAME/stable_origin
        - export UAV_NAME=uav2; waitForControl; roslaunch uvdar_core uvdar_kalman_identified.launch output_frame:=$UAV_NAME/stable_origin
        - export UAV_NAME=uav3; waitForControl; roslaunch uvdar_core uvdar_kalman_identified.launch output_frame:=$UAV_NAME/stable_origin
  - sensor_neighbor:
      layout: tiled
      synchronize: after
      panes:
        - export UAV_NAME=uav1; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_sensor_type:=./custom_configs/sensor.yaml
        - export UAV_NAME=uav2; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_sensor_type:=./custom_configs/sensor.yaml
        - export UAV_NAME=uav3; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_sensor_type:=./custom_configs/sensor.yaml
  - formation:
      layout: tiled
      synchronize: after
      panes:
        - export UAV_NAME=uav1; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml
        - export UAV_NAME=uav2; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml
        - export UAV_NAME=uav3; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml